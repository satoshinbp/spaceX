{"ast":null,"code":"var _jsxFileName = \"/Users/shinya/dashlabs/apollo-client-tutorial/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { ApolloClient, InMemoryCache, ApolloProvider, useQuery, gql } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = new ApolloClient({\n  uri: 'https://api.spacex.land/graphql/',\n  cache: new InMemoryCache()\n});\nconst GET_FILMS = gql`\n  query {\n    launchesPast(limit: 10) {\n      mission_name\n      launch_date_local\n      launch_site {\n        site_name_long\n      }\n      links {\n        article_link\n        video_link\n      }\n      rocket {\n        rocket_name\n        first_stage {\n          cores {\n            flight\n            core {\n              reuse_count\n              status\n            }\n          }\n        }\n        second_stage {\n          payloads {\n            payload_type\n            payload_mass_kg\n            payload_mass_lbs\n          }\n        }\n      }\n      ships {\n        name\n        home_port\n        image\n      }\n    }\n  }\n`;\n\nconst Films = id => {\n  _s();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_FILMS, {\n    variables: {\n      id\n    }\n  });\n  if (loading) return 'Loading...';\n  if (error) return `Error! ${error.message}`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: data.lookup.artist.name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Films, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = Films;\n\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: client,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"My first Apollo app \\uD83D\\uDE80\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Films, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Films\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/shinya/dashlabs/apollo-client-tutorial/src/App.js"],"names":["ApolloClient","InMemoryCache","ApolloProvider","useQuery","gql","client","uri","cache","GET_FILMS","Films","id","loading","error","data","variables","message","lookup","artist","name","App"],"mappings":";;;AAAA,OAAO,WAAP;AACA,SACEA,YADF,EAEEC,aAFF,EAGEC,cAHF,EAIEC,QAJF,EAKEC,GALF,QAMO,gBANP;;AAQA,MAAMC,MAAM,GAAG,IAAIL,YAAJ,CAAiB;AAC9BM,EAAAA,GAAG,EAAE,kCADyB;AAE9BC,EAAAA,KAAK,EAAE,IAAIN,aAAJ;AAFuB,CAAjB,CAAf;AAKA,MAAMO,SAAS,GAAGJ,GAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAtCA;;AAwCA,MAAMK,KAAK,GAAIC,EAAD,IAAQ;AAAA;;AACpB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BV,QAAQ,CAACK,SAAD,EAAY;AAAEM,IAAAA,SAAS,EAAE;AAAEJ,MAAAA;AAAF;AAAb,GAAZ,CAAzC;AAEA,MAAIC,OAAJ,EAAa,OAAO,YAAP;AACb,MAAIC,KAAJ,EAAW,OAAQ,UAASA,KAAK,CAACG,OAAQ,EAA/B;AAEX,sBAAO;AAAA,cAAMF,IAAI,CAACG,MAAL,CAAYC,MAAZ,CAAmBC;AAAzB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAPD;;GAAMT,K;UAC6BN,Q;;;KAD7BM,K;;AASN,MAAMU,GAAG,GAAG,MAAM;AAChB,sBACE,QAAC,cAAD;AAAgB,IAAA,MAAM,EAAEd,MAAxB;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAPD;;MAAMc,G;AASN,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  useQuery,\n  gql,\n} from '@apollo/client';\n\nconst client = new ApolloClient({\n  uri: 'https://api.spacex.land/graphql/',\n  cache: new InMemoryCache(),\n});\n\nconst GET_FILMS = gql`\n  query {\n    launchesPast(limit: 10) {\n      mission_name\n      launch_date_local\n      launch_site {\n        site_name_long\n      }\n      links {\n        article_link\n        video_link\n      }\n      rocket {\n        rocket_name\n        first_stage {\n          cores {\n            flight\n            core {\n              reuse_count\n              status\n            }\n          }\n        }\n        second_stage {\n          payloads {\n            payload_type\n            payload_mass_kg\n            payload_mass_lbs\n          }\n        }\n      }\n      ships {\n        name\n        home_port\n        image\n      }\n    }\n  }\n`;\n\nconst Films = (id) => {\n  const { loading, error, data } = useQuery(GET_FILMS, { variables: { id } });\n\n  if (loading) return 'Loading...';\n  if (error) return `Error! ${error.message}`;\n\n  return <div>{data.lookup.artist.name}</div>;\n};\n\nconst App = () => {\n  return (\n    <ApolloProvider client={client}>\n      <h2>My first Apollo app ðŸš€</h2>\n      <Films />\n    </ApolloProvider>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}