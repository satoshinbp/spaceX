{"ast":null,"code":"var _jsxFileName = \"/Users/shinya/dashlabs/apollo-client-tutorial/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { ApolloClient, InMemoryCache, ApolloProvider, useQuery, gql } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = new ApolloClient({\n  uri: 'https://tmdb.apps.quintero.io/',\n  cache: new InMemoryCache()\n}); // client\n//   .query({\n//     query: gql`\n//       query GetRates {\n//         rates(currency: \"USD\") {\n//           currency\n//         }\n//       }\n//     `,\n//   })\n//   .then((result) => console.log(result));\n// const GET_DOGS = gql`\n//   query GetDogs {\n//     dogs {\n//       id\n//       breed\n//     }\n//   }\n// `;\n// function Dogs({ onDogSelected }) {\n//   const { loading, error, data } = useQuery(GET_DOGS);\n//   if (loading) return 'Loading...';\n//   if (error) return `Error! ${error.message}`;\n//   return (\n//     <select name=\"dog\" onChange={onDogSelected}>\n//       {data.dogs.map((dog) => (\n//         <option key={dog.id} value={dog.breed}>\n//           {dog.breed}\n//         </option>\n//       ))}\n//     </select>\n//   );\n// }\n// const EXCHANGE_RATES = gql`\n//   query GetExchangeRates {\n//     rates(currency: \"USD\") {\n//       currency\n//       rate\n//     }\n//   }\n// `;\n// const ExchangeRates = () => {\n//   const { loading, error, data } = useQuery(EXCHANGE_RATES);\n//   if (loading) return <p>Loading...</p>;\n//   if (error) return <p>Error :(</p>;\n//   return data.rates.map(({ currency, rate }) => (\n//     <div key={currency}>\n//       <p>\n//         {currency}: {rate}\n//       </p>\n//     </div>\n//   ));\n// };\n\nconst GET_MOVIES = gql`\n  query GetMovies {\n    search(term: \"Josh\") {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      edges {\n        node {\n          ... on Movie {\n            name\n            overview\n            poster(size: W342)\n          }\n        }\n      }\n    }\n  }\n`;\n\nfunction Movies({\n  onMovieSelected\n}) {\n  _s();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_MOVIES);\n  if (loading) return 'Loading...';\n  if (error) return `Error! ${error.message}`;\n  return /*#__PURE__*/_jsxDEV(\"select\", {\n    name: \"movie\",\n    onChange: onMovieSelected,\n    children: data.movies.map(movie => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: movie.name,\n      children: movie.name\n    }, movie.name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Movies, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = Movies;\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: client,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"My first Apollo app \\uD83D\\uDE80\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Movies, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Movies\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/shinya/dashlabs/apollo-client-tutorial/src/App.js"],"names":["ApolloClient","InMemoryCache","ApolloProvider","useQuery","gql","client","uri","cache","GET_MOVIES","Movies","onMovieSelected","loading","error","data","message","movies","map","movie","name","App"],"mappings":";;;AAAA,OAAO,WAAP;AACA,SACEA,YADF,EAEEC,aAFF,EAGEC,cAHF,EAIEC,QAJF,EAKEC,GALF,QAMO,gBANP;;AAQA,MAAMC,MAAM,GAAG,IAAIL,YAAJ,CAAiB;AAC9BM,EAAAA,GAAG,EAAE,gCADyB;AAE9BC,EAAAA,KAAK,EAAE,IAAIN,aAAJ;AAFuB,CAAjB,CAAf,C,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMO,UAAU,GAAGJ,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAlBA;;AAoBA,SAASK,MAAT,CAAgB;AAAEC,EAAAA;AAAF,CAAhB,EAAqC;AAAA;;AACnC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BV,QAAQ,CAACK,UAAD,CAAzC;AAEA,MAAIG,OAAJ,EAAa,OAAO,YAAP;AACb,MAAIC,KAAJ,EAAW,OAAQ,UAASA,KAAK,CAACE,OAAQ,EAA/B;AAEX,sBACE;AAAQ,IAAA,IAAI,EAAC,OAAb;AAAqB,IAAA,QAAQ,EAAEJ,eAA/B;AAAA,cACGG,IAAI,CAACE,MAAL,CAAYC,GAAZ,CAAiBC,KAAD,iBACf;AAAyB,MAAA,KAAK,EAAEA,KAAK,CAACC,IAAtC;AAAA,gBACGD,KAAK,CAACC;AADT,OAAaD,KAAK,CAACC,IAAnB;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GAfQT,M;UAC0BN,Q;;;KAD1BM,M;;AAiBT,SAASU,GAAT,GAAe;AACb,sBACE,QAAC,cAAD;AAAgB,IAAA,MAAM,EAAEd,MAAxB;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;MAPQc,G;AAST,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  useQuery,\n  gql,\n} from '@apollo/client';\n\nconst client = new ApolloClient({\n  uri: 'https://tmdb.apps.quintero.io/',\n  cache: new InMemoryCache(),\n});\n\n// client\n//   .query({\n//     query: gql`\n//       query GetRates {\n//         rates(currency: \"USD\") {\n//           currency\n//         }\n//       }\n//     `,\n//   })\n//   .then((result) => console.log(result));\n\n// const GET_DOGS = gql`\n//   query GetDogs {\n//     dogs {\n//       id\n//       breed\n//     }\n//   }\n// `;\n\n// function Dogs({ onDogSelected }) {\n//   const { loading, error, data } = useQuery(GET_DOGS);\n\n//   if (loading) return 'Loading...';\n//   if (error) return `Error! ${error.message}`;\n\n//   return (\n//     <select name=\"dog\" onChange={onDogSelected}>\n//       {data.dogs.map((dog) => (\n//         <option key={dog.id} value={dog.breed}>\n//           {dog.breed}\n//         </option>\n//       ))}\n//     </select>\n//   );\n// }\n\n// const EXCHANGE_RATES = gql`\n//   query GetExchangeRates {\n//     rates(currency: \"USD\") {\n//       currency\n//       rate\n//     }\n//   }\n// `;\n\n// const ExchangeRates = () => {\n//   const { loading, error, data } = useQuery(EXCHANGE_RATES);\n\n//   if (loading) return <p>Loading...</p>;\n//   if (error) return <p>Error :(</p>;\n\n//   return data.rates.map(({ currency, rate }) => (\n//     <div key={currency}>\n//       <p>\n//         {currency}: {rate}\n//       </p>\n//     </div>\n//   ));\n// };\n\nconst GET_MOVIES = gql`\n  query GetMovies {\n    search(term: \"Josh\") {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      edges {\n        node {\n          ... on Movie {\n            name\n            overview\n            poster(size: W342)\n          }\n        }\n      }\n    }\n  }\n`;\n\nfunction Movies({ onMovieSelected }) {\n  const { loading, error, data } = useQuery(GET_MOVIES);\n\n  if (loading) return 'Loading...';\n  if (error) return `Error! ${error.message}`;\n\n  return (\n    <select name=\"movie\" onChange={onMovieSelected}>\n      {data.movies.map((movie) => (\n        <option key={movie.name} value={movie.name}>\n          {movie.name}\n        </option>\n      ))}\n    </select>\n  );\n}\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <h2>My first Apollo app ðŸš€</h2>\n      <Movies />\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}