{"ast":null,"code":"var _jsxFileName = \"/Users/shinya/dashlabs/apollo-client-tutorial/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { ApolloClient, InMemoryCache, ApolloProvider, useQuery, gql, createHttpLink } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst link = createHttpLink({\n  uri: 'http://graphql.org/swapi-graphql',\n  credentials: 'omit'\n});\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link\n});\nconst GET_FILMS = gql`\n  query starwars {\n    allFilms {\n      after\n    }\n  }\n`;\n\nconst Films = () => {\n  _s();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_FILMS, {\n    variables: {\n      first: 151\n    }\n  });\n  if (loading) return 'Loading...';\n  if (error) return `Error! ${error.message}`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: data.films.map(film => /*#__PURE__*/_jsxDEV(\"div\", {\n      value: film.after,\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: film.after\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this)\n    }, film.after, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Films, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = Films;\n\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: client,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"My first Apollo app \\uD83D\\uDE80\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Films, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Films\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/shinya/dashlabs/apollo-client-tutorial/src/App.js"],"names":["ApolloClient","InMemoryCache","ApolloProvider","useQuery","gql","createHttpLink","link","uri","credentials","client","cache","GET_FILMS","Films","loading","error","data","variables","first","message","films","map","film","after","App"],"mappings":";;;AAAA,OAAO,WAAP;AACA,SACEA,YADF,EAEEC,aAFF,EAGEC,cAHF,EAIEC,QAJF,EAKEC,GALF,EAMEC,cANF,QAOO,gBAPP;;AASA,MAAMC,IAAI,GAAGD,cAAc,CAAC;AAC1BE,EAAAA,GAAG,EAAE,kCADqB;AAE1BC,EAAAA,WAAW,EAAE;AAFa,CAAD,CAA3B;AAKA,MAAMC,MAAM,GAAG,IAAIT,YAAJ,CAAiB;AAC9BU,EAAAA,KAAK,EAAE,IAAIT,aAAJ,EADuB;AAE9BK,EAAAA;AAF8B,CAAjB,CAAf;AAKA,MAAMK,SAAS,GAAGP,GAAI;AACtB;AACA;AACA;AACA;AACA;AACA,CANA;;AAQA,MAAMQ,KAAK,GAAG,MAAM;AAAA;;AAClB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BZ,QAAQ,CAACQ,SAAD,EAAY;AACnDK,IAAAA,SAAS,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT;AADwC,GAAZ,CAAzC;AAIA,MAAIJ,OAAJ,EAAa,OAAO,YAAP;AACb,MAAIC,KAAJ,EAAW,OAAQ,UAASA,KAAK,CAACI,OAAQ,EAA/B;AAEX,sBACE;AAAA,cACGH,IAAI,CAACI,KAAL,CAAWC,GAAX,CAAgBC,IAAD,iBACd;AAAsB,MAAA,KAAK,EAAEA,IAAI,CAACC,KAAlC;AAAA,6BACE;AAAA,kBAAKD,IAAI,CAACC;AAAV;AAAA;AAAA;AAAA;AAAA;AADF,OAAUD,IAAI,CAACC,KAAf;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CAjBD;;GAAMV,K;UAC6BT,Q;;;KAD7BS,K;;AAmBN,MAAMW,GAAG,GAAG,MAAM;AAChB,sBACE,QAAC,cAAD;AAAgB,IAAA,MAAM,EAAEd,MAAxB;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAPD;;MAAMc,G;AASN,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  useQuery,\n  gql,\n  createHttpLink,\n} from '@apollo/client';\n\nconst link = createHttpLink({\n  uri: 'http://graphql.org/swapi-graphql',\n  credentials: 'omit',\n});\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link,\n});\n\nconst GET_FILMS = gql`\n  query starwars {\n    allFilms {\n      after\n    }\n  }\n`;\n\nconst Films = () => {\n  const { loading, error, data } = useQuery(GET_FILMS, {\n    variables: { first: 151 },\n  });\n\n  if (loading) return 'Loading...';\n  if (error) return `Error! ${error.message}`;\n\n  return (\n    <div>\n      {data.films.map((film) => (\n        <div key={film.after} value={film.after}>\n          <h2>{film.after}</h2>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst App = () => {\n  return (\n    <ApolloProvider client={client}>\n      <h2>My first Apollo app ðŸš€</h2>\n      <Films />\n    </ApolloProvider>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}